regex pattern for cwe-1231 and occurance stats for each SoC analyzed

------------------------------------- regex pattern ----------------------------------------

if(~(rst_ni && ~jtag_unlock && ~rst_9))
    begin
      for (int j=0; j < 6; j=j+1) begin
      reglk_mem[j] <= 'h0;
      end
    end

ultimately, this vulnerability is based on something being reset by more than one signal. To find
this vulnerability in the wild, we mostly care about the 'if(...)' statement, specifically ones
that are responsible for reseting another register using a flip flop. Thus, the following pattern
is used 

simple
if *[(][~!]*[(]*( *[~a-zA-Z0-9_\-\.\[\]]+ *(&&|&) *[~a-zA-Z0-9_\-\.\[\]]+)+( *(&&|&) *[~a-zA-Z0-9_\-\.\[\]]+)* *[)]*

constrained
if *[(][~!]*[(]*( *([~a-zA-Z0-9_\-\.\[\]]*(re|res|reset|rst)[~a-zA-Z0-9_\-\.\[\]]*) *(&&|&) *[~a-zA-Z0-9_\-\.\[\]]+)+( *(&&|&) *([~a-zA-Z0-9_\-\.\[\]]*(re|res|reset|rst)[~a-zA-Z0-9_\-\.\[\]]*))* *[)]*


----------------------------------- occurance stats -----------------------------------------

Simple
Hack@DAC 2018 SoC: 298 occurances
Hack@DAC 2019 SoC: 167 occurances
Hack@DAC 2021 SoC: 1125 occurances
PicoRV32:          97 occurances
Hummingbirdv2:     44 occurances
UltraembeddedOld:  456 occurances
UltraembeddedNew:  132 occurances

Constrained
Hack@DAC 2018 SoC: 62 occurances
Hack@DAC 2019 SoC: 32 occurances
Hack@DAC 2021 SoC: 197 occurances
PicoRV32:          33 occurances
Hummingbirdv2:     15 occurances
UltraembeddedOld:  20 occurances
UltraembeddedNew:  23 occurances

----------------------------------- insertion information ------------------------------------

number, type, filename, line num, soc name
1. Type 2, bw_r_rf16x160.v, 390, hackdac21
2. Type 3, bw_r_rf16x160.v, 394, hackdac21
3. Type 4, bw_r_rf16x160.v, 397, hackdac21
4. Type 3, bw_r_rf32x80.v, 272, hackdac21

regex pattern for cwe-1280 and occurance stats for each SoC analyzed

------------------------------------- regex pattern ----------------------------------------

  logic grant_access;
  always_ff @ (posedge clk or negedge rst_n)
    begin
      if (!rst_n)
        data_out = 0;
      else begin
        //here in lies the vulnerability
        //grant access allows data_out to be written to if
        //usr_id = 4, but grant_access is written to in a different
        //cycle than data_out due to the use of blocking assignments
        //could be fixed by reversing the order of assignments,
        data_out = (grant_access) ? data_in : data_out;
        grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;
      end
    end

This vulnerability has to do with the order in which writes to grant_access and data_out occur. 
grant_access is a lock which gaurds writes to data_out, by checking if the usr_id is equal to a 
specific value. Due to the use of blocking assignments, and order in which they occur, grant_access
will be written to in the cycle after data_out is. This means that grant_access may be driven high
due to a previous value of usr_id, rather than the current, allowing data_out to written to by an 
unauthorized party. To fix this, the order of assignments should be reversed. to detect the occurances
of this pattern in designs, the following regex can be used. This regex looks for two signals written one
after the other, where second signal is writen to using a bit or hex pattern.

[~a-zA-Z0-9_\-\.]+ *= *[(]*[~a-zA-Z0-9_\-\.]+[)]* *[?] *[~a-zA-Z0-9_\-\.]+ *: *[~a-zA-Z0-9_\-\.]+ *;[ |\n]*[~a-zA-Z0-9_\-\.]+ *= *[(]*[~a-zA-Z0-9_\-\.]+ *(==|!=) *[~a-zA-Z0-9_\-\.']+ *[)]* *[?] *[~a-zA-Z0-9_\-\.']+ *: *[~a-zA-Z0-9_\-\.']+

----------------------------------- occurance stats -----------------------------------------

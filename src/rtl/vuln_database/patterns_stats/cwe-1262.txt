regex pattern for cwe-1262 and occurance stats for each SoC analyzed

------------------------------------- regex pattern ----------------------------------------

    if ((priv_lvl_o & EXPECTED_PRIV_LEVEL != EXPECTED_PRIV_LEVEL) && !(csr_addr == PROTECTED_REG)) begin   
		//raise excetption
                exception = 1'b1;
            end

this vulnerability is related to preventing an exception from being raised when trying to access a
specific protected register in a csr unit. Instead, the vulnerability should be raised when trying
to access the register. To detect this pattern, we use a regex that is looking for a condition check
paired with another check. This can be found using the following regex

modified
[~a-zA-Z0-9_\-\.]+ *(&|&&) *[(]* *[~a-zA-Z0-9_\-\.]+

(&&|&) *!*~*[(]*[~a-zA-Z0-9_\-\.\[\]]+ *(!=|==) *[~a-zA-Z0-9_\-\.\[\]:]+[)]*

standard
[(]*[~a-zA-Z0-9_\-\.\[\]]+ *(&|&&) *[~a-zA-Z0-9_\-\.\[\]].* *(==|!=) *[~a-zA-Z0-9_\-\.\[\]]+[)]* *(&&|&) *!*[(]*[~a-za-z0-9_\-\.\[\]]+ *(!=|==) *[~a-za-z0-9_\-\.\[\]]+[)]*

----------------------------------- occurance stats -----------------------------------------

Standard
Hack@DAC 2018 SoC: 2 occurances
Hack@DAC 2019 SoC: 7 occurances
Hack@DAC 2021 SoC: 15 occurances
PicoRV32:          0 occurances
Hummingbirdv2:     3 occurances
UltraembeddedOld:  0 occurances
UltraembeddedNew:  0 occurances

Modified
Hack@DAC 2018 SoC: 324 occurances
Hack@DAC 2019 SoC: 94 occurances
Hack@DAC 2021 SoC: 15 occurances
PicoRV32:          0 occurances
Hummingbirdv2:     3 occurances
UltraembeddedOld:  0 occurances
UltraembeddedNew:  0 occurances

----------------------------------- insertion information ------------------------------------

number, type, filename, line num, soc name
hackdac21
1. Type 2, csr_regfile.sv, 248, hackatdac21

hackdac19
1. Type 3, csr_regfile.sv, 865m hackatdac19

hackdac18
1. Type 4, 

picorv32
1. Type 2, 

hummingbird
1. Type 3,    

ultraembedded(old)
1. Type 4, 

ultraembedded(new)
1. Type 2,
